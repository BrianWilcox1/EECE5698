/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package exlcm;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class vnimu_data implements lcm.lcm.LCMEncodable
{
    public float yaw;
    public float pitch;
    public float roll;
    public float magX;
    public float magY;
    public float magZ;
    public float accelX;
    public float accelY;
    public float accelZ;
    public float gyroX;
    public float gyroY;
    public float gyroZ;
 
    public vnimu_data()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xfbdc5ce0f5b16b5fL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(exlcm.vnimu_data.class))
            return 0L;
 
        classes.add(exlcm.vnimu_data.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeFloat(this.yaw); 
 
        outs.writeFloat(this.pitch); 
 
        outs.writeFloat(this.roll); 
 
        outs.writeFloat(this.magX); 
 
        outs.writeFloat(this.magY); 
 
        outs.writeFloat(this.magZ); 
 
        outs.writeFloat(this.accelX); 
 
        outs.writeFloat(this.accelY); 
 
        outs.writeFloat(this.accelZ); 
 
        outs.writeFloat(this.gyroX); 
 
        outs.writeFloat(this.gyroY); 
 
        outs.writeFloat(this.gyroZ); 
 
    }
 
    public vnimu_data(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public vnimu_data(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static exlcm.vnimu_data _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        exlcm.vnimu_data o = new exlcm.vnimu_data();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.yaw = ins.readFloat();
 
        this.pitch = ins.readFloat();
 
        this.roll = ins.readFloat();
 
        this.magX = ins.readFloat();
 
        this.magY = ins.readFloat();
 
        this.magZ = ins.readFloat();
 
        this.accelX = ins.readFloat();
 
        this.accelY = ins.readFloat();
 
        this.accelZ = ins.readFloat();
 
        this.gyroX = ins.readFloat();
 
        this.gyroY = ins.readFloat();
 
        this.gyroZ = ins.readFloat();
 
    }
 
    public exlcm.vnimu_data copy()
    {
        exlcm.vnimu_data outobj = new exlcm.vnimu_data();
        outobj.yaw = this.yaw;
 
        outobj.pitch = this.pitch;
 
        outobj.roll = this.roll;
 
        outobj.magX = this.magX;
 
        outobj.magY = this.magY;
 
        outobj.magZ = this.magZ;
 
        outobj.accelX = this.accelX;
 
        outobj.accelY = this.accelY;
 
        outobj.accelZ = this.accelZ;
 
        outobj.gyroX = this.gyroX;
 
        outobj.gyroY = this.gyroY;
 
        outobj.gyroZ = this.gyroZ;
 
        return outobj;
    }
 
}

